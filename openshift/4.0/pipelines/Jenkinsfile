#!groovy

def MS_TEAMS_SECRET
def MS_TEAMS_WEBHOOK_KEY
def RELEASE_VERSION
def TAG
def DESTINATION
pipeline {

  agent any
  environment {
    // MS Teams Configuration
    MS_TEAMS_SECRET = 'ms-teams-secrets'
    MS_TEAMS_WEBHOOK_KEY = 'notification-webhook'
    VANITY_URL = "https://pims-app-3cd915-dev.apps.silver.devops.gov.bc.ca/"
    DEBUG_OUTPUT = sh(script: 'echo "${DEBUG_OUTPUT:-true}"', returnStdout: true).trim()
    OC_JOB_NAME = sh(script: 'echo "${OC_JOB_NAME:-dev}"', returnStdout: true).trim()
    APPROVAL_REQUIRED = sh(script: 'echo "${APPROVAL_REQUIRED:-true}"', returnStdout: true).trim()
    WEBHOOK_URL = sh(script: "oc extract --to=- --keys=${MS_TEAMS_WEBHOOK_KEY} secret/ms-teams-secrets 2>&1 | sed -n 2p", returnStdout: true).trim()
  }

  options {
               office365ConnectorWebhooks([
            [
              startNotification: true
            ]
          ])
  }

  stages {
    stage('Init') {
      steps {
        script {
          MS_TEAMS_SECRET = 'ms-teams-secrets'
          MS_TEAMS_WEBHOOK_KEY = 'notification-webhook'
          DESTINATION = sh(script: 'echo "${DESTINATION:-uat}"', returnStdout: true).trim()
          env.NOTIFICATION_WEBHOOK_URL = sh(script: "oc extract --to=- --keys=${MS_TEAMS_WEBHOOK_KEY} secret/ms-teams-secrets 2>&1 | sed -n 2p", returnStdout: true).trim()
          BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].shortDescription}"
          //echo "web URL is ! ${env.NOTIFICATION_WEBHOOK_URL}"
        }
      }
    }
    stage('Release Version') {
      steps {
        script {
          if (env.BRANCH_NAME != 'dev') {
            RELEASE_VERSION = sh(
              returnStdout: true,
              script: 'git describe --tags `git rev-list --tags --max-count=1`'
            ).trim() + "-" + OC_JOB_NAME

          } else {
            RELEASE_VERSION = 'latest'
          }
          
        }
      }
    }
    stage('Approve Deployment') {
      when {
        beforeInput true
         expression { 
             DESTINATION == 'uat'
             }
      }
      steps {
        script {
          timeout(time: 2, unit: 'MINUTES') {
            def val = input(message: "Deploy Release version $RELEASE_VERSION to $DESTINATION?" , ok: 'Yes, go ahead')
            echo "*** ${RELEASE_VERSION} has been approved for deployment. Proceeding... ***"
          }

        }
      }
    }
    stage('Deploy'){
        steps {
            script{
                echo 'Deployment completed...'
            }
        }
    }
  }
  post {
    failure {
      script {
        office365ConnectorSend webhookUrl: "${env.NOTIFICATION_WEBHOOK_URL}",
          factDefinitions: [
            [name: "Release version", template: "${RELEASE_VERSION}"]
          ]
      }
    }
    success {
      script {
        office365ConnectorSend webhookUrl: "${env.NOTIFICATION_WEBHOOK_URL}",
          message: "Application has been [deployed to ${DESTINATION}](${VANITY_URL})",
          status: 'Success',
          color: '#00FF00', //green
          factDefinitions: [
            [name: "Release version", template: "${RELEASE_VERSION}"],
            [name: "Remarks", template: "${BUILD_TRIGGER_BY}"]
          ]
      }
    }
  }
}